# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ml_pb2 as ml__pb2


class MLBackendStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ClassifyImage = channel.unary_unary(
        '/MLBackend/ClassifyImage',
        request_serializer=ml__pb2.ImageClassificationRequest.SerializeToString,
        response_deserializer=ml__pb2.ImageClassificationResponse.FromString,
        )


class MLBackendServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ClassifyImage(self, request, context):
    """note: we might need to split the images into chunks
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MLBackendServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ClassifyImage': grpc.unary_unary_rpc_method_handler(
          servicer.ClassifyImage,
          request_deserializer=ml__pb2.ImageClassificationRequest.FromString,
          response_serializer=ml__pb2.ImageClassificationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MLBackend', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
